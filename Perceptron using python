import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs

# Generate 2D linearly separable data
X, y = make_blobs(n_samples=100, centers=2, n_features=2, random_state=0)
y = np.where(y == 0, -1, 1)  # Convert to -1 and 1

# Visualize
plt.scatter(X[:, 0], X[:, 1], c=y, cmap='bwr')
plt.title("2 Class Data")
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.show()

class Perceptron:
    def __init__(self, learning_rate=0.1, n_epochs=1000):
        self.lr = learning_rate
        self.n_epochs = n_epochs
        self.w = None
        self.b = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.w = np.zeros(n_features)
        self.b = 0

        for epoch in range(self.n_epochs):
            for i in range(n_samples):
                linear_output = np.dot(X[i], self.w) + self.b
                y_pred = np.sign(linear_output)

                # Update if wrong prediction
                if y[i] * linear_output <= 0:
                    self.w += self.lr * y[i] * X[i]
                    self.b += self.lr * y[i]

    def predict(self, X):
        return np.sign(np.dot(X, self.w) + self.b)


# Create and train the model
model = Perceptron(learning_rate=0.01, n_epochs=100)
model.fit(X, y)

# Predict
y_pred = model.predict(X)

# Accuracy
accuracy = np.mean(y_pred == y)
print(f"Training Accuracy: {accuracy * 100:.2f}%")


# Plot decision boundary
def plot_decision_boundary(X, y, model):
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),
                         np.linspace(y_min, y_max, 100))

    grid = np.c_[xx.ravel(), yy.ravel()]
    preds = model.predict(grid).reshape(xx.shape)

    plt.contourf(xx, yy, preds, alpha=0.5, cmap='bwr')
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='bwr', edgecolors='k')
    plt.title("Perceptron Decision Boundary")
    plt.xlabel("Feature 1")
    plt.ylabel("Feature 2")
    plt.show()

plot_decision_boundary(X, y, model)
